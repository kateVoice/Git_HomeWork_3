{
	"info": {
		"_postman_id": "1a73786b-d528-4823-8969-fcaab35304f8",
		"name": "HW2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\"), function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"pm.environment.set(\"age\", resp_body.age);\r",
							"pm.environment.set(\"name\", resp_body.name);\r",
							"pm.environment.set(\"salary\", resp_body.salary);\r",
							"pm.environment.set(\"family\", resp_body.family);\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name \" + resp_body.name, function () {\r",
							"    pm.expect(resp_body.name).to.eql(\"Katrine\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age \" + resp_body.age, function () {\r",
							"    pm.expect(+resp_body.age).to.eql(38);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary \" + resp_body.salary, function () {\r",
							"    pm.expect(resp_body.salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = pm.request.body.formdata;\r",
							"\r",
							"console.log(\"Request name is: \" + req.get(\"name\"));\r",
							"console.log(\"Request age is: \" + req.get(\"age\"));\r",
							"console.log(\"Request salary is: \" + req.get(\"salary\"));\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test names are equals: \" + resp_body.name, function () {\r",
							"    pm.expect(resp_body.name).to.eql(req.get(\"name\"));\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test ages are equals: \" + resp_body.age, function () {\r",
							"    pm.expect(resp_body.age).to.eql(req.get(\"age\"));\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salaries are equals: \" + resp_body.salary, function () {\r",
							"    pm.expect(resp_body.salary).to.eql(+req.get(\"salary\"));\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Responce family is: \" , resp_body.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Your test u_salary_1_5_year are equals: \" + resp_body.family.u_salary_1_5_year, function () {\r",
							"    pm.expect(resp_body.family.u_salary_1_5_year).to.eql(req.get(\"salary\")*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katrine",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\"), function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							"//3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"pm.environment.set(\"age\", resp_body.age);\r",
							"pm.environment.set(\"name\", resp_body.name);\r",
							"pm.environment.set(\"salary\", resp_body.salary);\r",
							"pm.environment.set(\"family\", resp_body.family);\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test names are equals: \" + resp_body.name, function () {\r",
							"    pm.expect(resp_body.name).to.eql(req.get(\"name\"));\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age are equals \" + resp_body.age,function () {\r",
							"    pm.expect(resp_body.age).to.eql(req.get(\"age\"));\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary are equals \" + resp_body.salary,function () {\r",
							"    pm.expect(resp_body.salary).to.eql(+req.get(\"salary\"));\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Your family: \", resp_body.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name \", function (){\r",
							"        pm.expect(resp_body.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age \", function (){\r",
							"        pm.expect(resp_body.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog has name \" + resp_body.family.pets.dog.name, function (){\r",
							"        pm.expect(resp_body.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog has age \" + resp_body.family.pets.dog.age, function (){\r",
							"        pm.expect(resp_body.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Kate&age=38&salary=5000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\"), function (){\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							"//3. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqst = pm.request.url.query;\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test names are equals: \" + resp_body.name, function () {\r",
							"    pm.expect(resp_body.name).to.eql(reqst.get(\"name\"));\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test ages are equals: \" + resp_body.age, function () {\r",
							"    pm.expect(resp_body.age).to.eql(+reqst.get(\"age\"));\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request salary is \" + reqst.get(\"salary\"));\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response salary is \" + resp_body.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Response 0 salary is \" + resp_body.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response 1 salary is \" + resp_body.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response 2 salary is \" + resp_body.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0st salary = request salary : \" + resp_body.salary[0], function () {\r",
							"    pm.expect(resp_body.salary[0]).to.eql(+reqst.get(\"salary\"));\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1st salary = request salary * 2 : \" + resp_body.salary[1], function () {\r",
							"    pm.expect(+resp_body.salary[1]).to.eql(reqst.get(\"salary\")*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2st salary = request salary * 3 : \" + resp_body.salary[2], function () {\r",
							"    pm.expect(+resp_body.salary[2]).to.eql(reqst.get(\"salary\")*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение перемённую переменную name\r",
							"pm.environment.set(\"name\", resp_body.name);\r",
							"//19. Передать в окружение перемённую переменную age\r",
							"pm.environment.set(\"age\", resp_body.age);\r",
							"//20. Передать в окружение перемённую переменную salary\r",
							"pm.environment.set(\"salary\", resp_body.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i = 0; i < resp_body.salary.lenght-1; i++) {\r",
							"    console.log(i + resp_body.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Kate&age=38&salary=5000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = pm.request.body.formdata;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Has property: start_qa_salary  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Has property: qa_salary_after_6_months  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Has property: qa_salary_after_12_months  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Has property: qa_salary_after_1.5_year  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Has property: qa_salary_after_3.5_years  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Has property: qa_salary_after_3.5_years  \", function (){\r",
							"        pm.expect(resp_body).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start salaries are equals: \" + resp_body.start_qa_salary, function () {\r",
							"    pm.expect(resp_body.start_qa_salary).to.eql(+req.get(\"salary\"));\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary * 2 = \" + resp_body.qa_salary_after_6_months, function () {\r",
							"    pm.expect(resp_body.qa_salary_after_6_months).to.eql(+req.get(\"salary\")*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary * 2.7 = \" + resp_body.qa_salary_after_12_months, function () {\r",
							"    pm.expect(resp_body.qa_salary_after_12_months).to.eql(+req.get(\"salary\")*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary  *3.3 = \" + resp_body[\"qa_salary_after_1.5_year\"], function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_1.5_year\"]).to.eql(+req.get(\"salary\")*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary * 3.8 = \" + resp_body[\"qa_salary_after_3.5_years\"], function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_3.5_years\"]).to.eql(+req.get(\"salary\")*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] = salary = \" + resp_body.person.u_name[1], function () {\r",
							"    pm.expect(resp_body.person.u_name[1]).to.eql(+req.get(\"salary\"));\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age : \" + resp_body.person.u_age, function () {\r",
							"    pm.expect(resp_body.person.u_age).to.eql(+req.get(\"age\"));\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary * 4.2 = \" + resp_body.person.u_salary_5_years, function () {\r",
							"    pm.expect(resp_body.person.u_salary_5_years).to.eql(+req.get(\"salary\")*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(resp_body.person);\r",
							"//for (var i = 0; i < resp_body.salary.lenght-1; i++) {\r",
							"    //console.log(i + resp_body.salary[i]);\r",
							"//};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}